rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isLoggedIn() {
      return request.auth != null;
    }

    function userIsAdmin() {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return user != null && user.data.is_admin == true;
    }

    // Current user is a player in the lobby, and is not banned.
    function userIsPlayer(lobby) {
      let player = get(/databases/$(database)/documents/lobbies/$(lobby)/players/$(request.auth.uid));
      return player != null && player.data.status != "banned";
    }
    // Allows only "players", not "spectators".
    function userIsActivePlayer(lobby) {
      return userIsPlayer(lobby) && get(/databases/$(database)/documents/lobbies/$(lobby)/players/$(request.auth.uid)).data.role == "player";
    }
    function userIsCreator(lobby) {
      return get(/databases/$(database)/documents/lobbies/$(lobby)).data.creator_uid == request.auth.uid;
    }
    function userIsInLobby(lobby) {
      return userIsPlayer(lobby) || userIsCreator(lobby);
    }
    function userIsJudge(lobby, turn) {
      return get(/databases/$(database)/documents/lobbies/$(lobby)/turns/$(turn)).data.judge_uid == request.auth.uid;
    }
    // Checks that the user actually has the cards they want to submit.
    function userHasCards(lobby) {
      let playerState = get(/databases/$(database)/documents/lobbies/$(lobby)/player_states/$(request.auth.uid));
      let hand = playerState.data['hand'];
      // Can't iterate arrays, so will only check the first few cards:
      let cards = request.resource.data.cards;
      return (hand[cards[0].id].content == cards[0].content) &&
             (cards.size() < 2 || hand[cards[1].id].content == cards[1].content) &&
             (cards.size() < 3 || hand[cards[2].id].content == cards[2].content) &&
             (cards.size() < 4 || hand[cards[3].id].content == cards[3].content) &&
             (cards.size() < 5 || hand[cards[4].id].content == cards[4].content) &&
             (cards.size() < 6 || hand[cards[5].id].content == cards[5].content);
    }
    // Don't allow changing player data for these fields:
    function fieldsUnchanged(fields) {
      return !request.resource.data.diff(resource.data).affectedKeys()
              .hasAny(fields);
    }
    // Don't allow changing anything if you're banned
    function userIsNotKicked(lobby, userID) {
      let doc = get(/databases/$(database)/documents/lobbies/$(lobby)/players/$(userID));
      return doc == null || doc.data['status'] != "banned";
    }
    // Allow changing user data, except admin-only fields
    function isAdminInfoUnchanged(userID) {
      let doc = get(/databases/$(database)/documents/users/$(userID));
      return doc == null || (
        request.resource.data['is_admin'] == doc.data['is_admin'] &&
        request.resource.data['uid'] == doc.data['uid']
      );
    }
    function isTurnPhase(lobby, turn, phase) {
      return get(/databases/$(database)/documents/lobbies/$(lobby)/turns/$(turn)).data.phase == phase;
    }

  	match /decks/{deck} {
      // Everyone can read deck info:
    	allow read;
      allow write: if isLoggedIn() && userIsAdmin();

      // But for locked decks, content is only available if you have a token:
      match /{deckDocument=**} {
        allow list;
        allow read, write: if isLoggedIn() && userIsAdmin();
        // Users don't need access to the deck.
      }
    }
    match /deck_locks/{deckID} {
      allow read, write: if isLoggedIn() && userIsAdmin();
    }
  	match /lobbies/{lobby} {
      // Anyone can read basic lobby data:
    	allow read: if isLoggedIn();
      // Lobby creator can change lobby settings:
      allow update: if isLoggedIn() && userIsCreator(lobby);

      match /{path=**} {
        // But only players can read internal data: turns, players, etc.
        allow read: if isLoggedIn() && (userIsAdmin() || userIsInLobby(lobby));
      }
      
      match /players/{userID} {
        // Allow kicking players if you are creator:
        allow write: if isLoggedIn() && userIsCreator(lobby); 
        // Allow reading and updating your own info.
        // Don't allow creating or deleting, to preserve history.
        allow read: if isLoggedIn() && request.auth.uid == userID;
        allow update: if isLoggedIn() && request.auth.uid == userID
                      && fieldsUnchanged(['role'])
                      && userIsNotKicked(lobby, userID);
      }

      match /player_states/{userID} {
        // Allow reading and updating your own info.
        // Don't allow creating or deleting, to preserve history.
        allow read: if isLoggedIn() && request.auth.uid == userID;
        allow update: if isLoggedIn() && request.auth.uid == userID
                      && fieldsUnchanged(['score', 'wins', 'likes', 'hand', 'discards_used', 'discard_tokens'])
                      && userIsNotKicked(lobby, userID);
      }

      match /deck_prompts/{document=**} {
        allow write: if isLoggedIn() && userIsCreator(lobby);
        // Players can remove prompt cards from deck:
        allow delete: if isLoggedIn() && userIsActivePlayer(lobby);
      }

      match /deck_responses/{document=**} {
        allow write: if isLoggedIn() && userIsCreator(lobby);
      }

      match /turns/{turn} {
        // Judge can update turn data, e.g. prompt:
        allow update: if isLoggedIn() && userIsJudge(lobby, turn);

        match /prompts/{cardID} {
          // Judge can set the prompt:
          allow write: if isLoggedIn() && userIsJudge(lobby, turn);

          match /votes/{voterID} {
            // Anyone can read votes, only yourself can add or remove votes.
            allow read;
            allow write: if isLoggedIn() && request.auth.uid == voterID;
          }
        }

        match /player_responses/{userID} {
          // Judge can reveal:
          allow update: if isLoggedIn() && userIsJudge(lobby, turn);
          // Allow players to submit as many times as needed:
          allow create, update: if isLoggedIn() && request.auth.uid == userID
                                && userIsActivePlayer(lobby) && userHasCards(lobby)
                                // Only allow submitting responses during 'answering' phase:
                                && isTurnPhase(lobby, turn, 'answering');
                                // Should also forbid changing like count, but who cares.
          allow delete: if isLoggedIn() && request.auth.uid == userID
                        && isTurnPhase(lobby, turn, 'answering');

          match /likes/{likerID} {
            // Anyone can read likes, only yourself can add or remove likes.
            allow read;
            allow write: if isLoggedIn() && request.auth.uid == likerID;
                          // Liking yourself is allowed
          }
        }
      }
      match /sounds/{document=**} {
        allow create, update: if isLoggedIn() && userIsActivePlayer(lobby);
      }
    }
    match /users/{userID} {
      allow read, write: if userIsAdmin();
      // allow reading only your own info when you are logged in.
      // also allow deleting your own info:
      allow read, delete: if isLoggedIn() && request.auth.uid == userID;
      // allow creating & changing your data, except admin fields:
      allow write: if isLoggedIn() && request.auth.uid == userID && isAdminInfoUnchanged(userID);
      // allow reading bots:
      allow list: if isLoggedIn(); // TODO: this is a security risk!

      match /deck_keys/{deckID} {
        // Allow list to see which decks _should_ have keys.
        allow write, list: if isLoggedIn() && request.auth.uid == userID;
      }
    }
    match /deck_migrations/{document=**} {
      allow read, write: if userIsAdmin();
    }
    match /{document=**} {
      allow read, write: if false;
    }
  }
}